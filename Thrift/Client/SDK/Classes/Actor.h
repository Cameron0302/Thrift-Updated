#pragma once

#include "../../Utils/Utils.h"

// Classes/ Structs
struct BlockPos;
class Dimension;
class ItemStack;
class Block;
class MoveInputHandler;
typedef unsigned int ArmorSlot;

class Actor {
public:
	BUILD_ACCESS(bool, isOnGround, 0x188);
	
	virtual void getStatusFlag(int ActorFlags);
	virtual void setStatusFlag(int ActorFlags, bool);
	virtual class Actor* getLastHurtByMob(void);
	virtual void setLastHurtByMob(Actor*);
	virtual class Actor* getLastHurtByPlayer(void);
	virtual void setLastHurtByPlayer(Actor*);
	virtual class Actor* getLastHurtMob(void);
	virtual void setLastHurtMob(Actor*);
	virtual bool outOfWorld(void);
	virtual void reloadHardcoded();
	virtual void reloadHardcodedClient();
	virtual void initializeComponents();
	virtual void reloadComponents();
	virtual void _serverInitItemStackIds(void);
	virtual void _doInitialMove(void);
	virtual void hasComponent(class HashedString* hashedstr);
	virtual ~Actor();
	virtual void resetUserPos(bool);
	virtual int getDimensionId(void);
	virtual int getOwnerEntityType(void);
	virtual void remove(void);
	virtual void setPos(Vec3<float> const&);
	virtual bool isRuntimePredictedMovementEnabled(void);
	virtual Vec3<float>* getPredictedMovementValues(void);
	virtual Vec3<float>* getPos(void);
	virtual Vec3<float>* getPosOld(void);
	virtual Vec3<float>* getPosExtrapolated(float);
	virtual Vec3<float>* getAttachPos(Vec3<float> ActorLocation, float);
	virtual Vec3<float>* getFiringPos(void);
	virtual void move(Vec3<float> const&);
	virtual void move(unsigned __int64 IActorMovementProxy, Vec3<float> const&);
	virtual float getInterpolatedRidingPosition(float);
	virtual float getInterpolatedBodyRot(float);
	virtual float getInterpolatedHeadRot(float);
	virtual float getInterpolatedBodyYaw(float);
	virtual float getYawSpeedInDegreesPerSecond(void);
	virtual float getInterpolatedWalkAnimSpeed(float);
	virtual float getInterpolatedRidingOffset(float);
	virtual void checkBlockCollisions();
	virtual void updateEntityInside(void* AABB);
	virtual void updateEntityInside(void);
	virtual bool isFireImmune(void);
	virtual void breaksFallingBlocks(void);
	virtual void blockedByShield(unsigned __int64 ActorDamageSource, Actor&);
	virtual void canDisableShield(void);
	virtual void teleportTo(Vec3<float> const&, bool, int, int);
	virtual void tryTeleportTo(Vec3<float> const&, bool, bool, int, int);
	virtual void chorusFruitTeleport(Vec3<float> const&);
	virtual void lerpMotion(Vec3<float> const&);
	virtual void tryCreateAddActorPacket(void);
	virtual void normalTick(void);
	virtual void baseTick(void);
	virtual void passengerTick(void);
	virtual void positionPassenger(Actor&, float);
	virtual void startRiding(Actor&);
	virtual void addPassenger(Actor&);
	virtual void flagPassengerToRemove(Actor&);
	virtual int getExitTip(const std::string&, unsigned __int64 InputMode);
	virtual std::string getEntityLocNameString();
	virtual void intersects(Vec3<float> const&, Vec3<float> const&);
	virtual bool isInWall(void);
	virtual bool isInvisible(void);
	virtual bool canShowNameTag(void);
	virtual bool canExistInPeaceful(void);
	virtual void setNameTagVisible(bool);
	virtual const std::string& _getNameTag(void);
	virtual __int64 getNameTagAsHash(void);
	virtual std::string getFormattedNameTag(void);
	virtual void filterFormattedNameTag(unsigned __int64 UIProfanityContext);
	virtual void setNameTag(const std::string&);
	virtual bool getAlwaysShowNameTag(void);
	virtual void setScoreTag(const std::string&);
	virtual std::string getScoreTag(void);
	virtual bool isInWater(void);
	virtual void hasEnteredWater(void);
	virtual bool isInLava(class BlockSource*);
	virtual bool isUnderLiquid(int MaterialType);
	virtual bool isOverWater(void);
	virtual void setBlockMovementSlowdownMultiplier(Vec3<float> const&);
	virtual void resetBlockMovementSlowdownMultiplier(void);
	virtual float getCameraOffset(void);
	virtual float getShadowHeightOffs(void);
	virtual float getShadowRadius(void);
	virtual float getHeadLookVector(float);
	virtual void canSeeInvisible(void);
	virtual bool canSee(Actor const&);
	virtual bool canSee(Vec3<float> const&);
	virtual void canInteractWithOtherEntitiesInGame(void);
	virtual bool isSkyLit(float);
	virtual float getBrightness(float);
	virtual void interactPreventDefault(void);
	virtual void playerTouch(Actor&);
	virtual void onAboveBubbleColumn(bool);
	virtual void onInsideBubbleColumn(bool);
	virtual bool isImmobile(void);
	virtual bool isSilent(void);
	virtual bool isSilentObserver(void);
	virtual bool isPickable(void);
	virtual bool isFishable(void);
	virtual bool isSleeping(void);
	virtual void setSleeping(bool);
	virtual bool isShootable(void);
	virtual void setSneaking(bool);
	virtual bool isBlocking(void);
	virtual bool isDamageBlocked(unsigned __int64 ActorDamageSource);
	virtual bool isAlive(void);
	virtual bool isOnFire(void);
	virtual bool isOnHotBlock(void);
	virtual bool isCreativeModeAllowed(void);
	virtual bool isSurfaceMob(void);
	virtual bool isTargetable(void);
	virtual bool isLocalPlayer(void);
	virtual bool isRemotePlayer(void);
	virtual bool isPlayer(void);
	virtual bool isAffectedByWaterBottle(void);
	virtual bool canAttack(Actor*, bool);
	virtual void setTarget(Actor*);
	virtual bool isValidTarget(Actor*);
	virtual void attack(Actor*, unsigned __int64 ActorDamageCause);
	virtual void performRangedAttack(Actor&, float);
	virtual int getEquipmentCount(void);
	virtual void setOwner(unsigned __int64);
	virtual void setSitting(bool);
	virtual void onTame(void);
	virtual void onFailedTame(void);
	virtual int getInventorySize(void);
	virtual int getEquipSlots(void);
	virtual int getChestSlots(void);
	virtual void setStanding(bool);
	virtual void canPowerJump(void);
	virtual void setCanPowerJump(bool);
	virtual bool isJumping(void);
	virtual bool isEnchanted(void);
	virtual void rideLanded(Vec3<float> const&, Vec3<float> const&);
	virtual bool shouldRender(void);
	virtual void playAmbientSound(void);
	virtual int getAmbientSound(void);
	virtual bool isInvulnerableTo(unsigned __int64 ActorDamageSource);
	virtual int getBlockDamageCause(Block const&);
	virtual void animateHurt(void);
	virtual void doFireHurt(int);
	virtual void onLightningHit(void);
	virtual void onBounceStarted(BlockPos const&, Block const&);
	virtual void feed(int);
	virtual void handleEntityEvent(unsigned __int64 ActorEvent, int);
	virtual float getPickRadius(void);
	virtual int getActorRendererId(void);
	virtual void spawnAtLocation(int, int);
	virtual void spawnAtLocation(int, int, float);
	virtual void spawnAtLocation(Block const&, int);
	virtual void spawnAtLocation(Block const&, int, float);
	virtual void spawnAtLocation(ItemStack const&, float);
	virtual void despawn(void);
	virtual void killed(Actor&);
	virtual void awardKillScore(Actor&, int);
	virtual void setArmor(int, ItemStack const&);
	virtual class ItemStack* getArmor(int);
	virtual std::vector<class ItemStack*> getAllArmor(void);
	virtual class ItemStack* getArmorMaterialTypeInSlot(int);
	virtual class TexturePtr* getArmorMaterialTextureTypeInSlot(int ArmorSlot);
	virtual int getArmorColorInSlot(int ArmorSlot, int);
	virtual class ItemStack* getEquippedSlot(int EquipmentSlot);
	virtual void setEquippedSlot(int EquipmentSlot, ItemStack const&);
	virtual class ItemStack* getCarriedItem(void);
	virtual void setCarriedItem(ItemStack const&);
	virtual void setOffhandSlot(ItemStack const&);
	virtual class ItemStack* getEquippedTotem(void);
	virtual void consumeTotem(void);
	virtual void save(void* compoundtag);
	virtual void saveWithoutId(void* compoundtag);
	virtual void load();
	virtual void loadLinks();
	virtual unsigned __int64 getEntityTypeId(void);
	virtual void queryEntityRenderer(void);
	virtual int getSourceUniqueID(void);
	virtual void thawFreezeEffect(void);
	virtual void canFreeze(void);
	virtual bool isWearingLeatherArmor(void);
	virtual int getLiquidAABB(int MaterialType);
	virtual void handleInsidePortal(BlockPos const&);
	virtual int getPortalCooldown(void);
	virtual int getPortalWaitTime(void);
	virtual void canChangeDimensionsUsingPortal(void);
	virtual void changeDimension(Dimension, bool);
	virtual void changeDimension(unsigned __int64 ChangeDimensionPacket);
	virtual class Actor* getControllingPlayer(void);
	virtual void checkFallDamage(float, bool);
	virtual void causeFallDamage(float, float, unsigned __int64 ActorDamageSource);
	virtual void handleFallDistanceOnServer(float, float, bool);
	virtual void playSynchronizedSound(void* LevelSoundEvent, Vec3<float> const&, Block const&, bool);
	virtual void playSynchronizedSound(void* LevelSoundEvent, Vec3<float> const&, int, bool);
	virtual void onSynchedFlagUpdate(int, long, long);
	virtual void onSynchedDataUpdate(int);
	virtual void canAddPassenger(Actor&);
	virtual void canPickupItem(ItemStack const&);
	virtual void canBePulledIntoVehicle(void);
	virtual void inCaravan(void);
	virtual bool isLeashableType(void);
	virtual void tickLeash(void);
	virtual void sendMotionPacketIfNeeded(void);
	virtual void canSynchronizeNewEntity(void);
	virtual void stopRiding(bool, bool, bool);
	virtual void startSwimming(void);
	virtual void stopSwimming(void);
	virtual void buildDebugInfo(std::basic_string<char, std::char_traits<char>, std::allocator<char>>&);
	virtual int getCommandPermissionLevel(void);
	virtual bool isClientSide(void);
	virtual class AttributeInstance* getMutableAttribute(class Attribute* Attribute);
	virtual class AttributeInstance* getAttribute(class Attribute* Attribute);
	virtual int getDeathTime(void);
	virtual void heal(int);
	virtual bool isInvertedHealAndHarm(void);
	virtual void canBeAffected(int);
	virtual void canBeAffectedByArrow(unsigned __int64 MobEffectInstance);
	virtual void onEffectAdded(unsigned __int64 MobEffectInstance);
	virtual void onEffectUpdated(unsigned __int64 MobEffectInstance);
	virtual void onEffectRemoved(unsigned __int64 MobEffectInstance);
	virtual void canObstructSpawningAndBlockPlacement(void);
	virtual int getAnimationComponent(void);
	virtual void openContainerComponent(Actor&);
	virtual void swing(void);
	virtual void useItem(ItemStack*, int ItemUseMethod, bool);
	virtual void hasOutputSignal(unsigned char);
	virtual int getOutputSignal(void);
	virtual int getDebugText(std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>>&);
	virtual int getMapDecorationRotation(void);
	virtual int getPassengerYRotation(Actor const&);
	virtual bool isWorldBuilder(void);
	virtual bool isCreative(void);
	virtual bool isAdventure(void);
	virtual bool isSurvival(void);
	virtual bool isSpectator(void);
	virtual bool isAttackableGamemode(void);
	virtual void add(ItemStack&);
	virtual void drop(ItemStack const&, bool);
	virtual int getInteraction(Actor&, unsigned __int64 ActorInteraction, Vec3<float> const&);
	virtual void canDestroyBlock(Block const&);
	virtual void setAuxValue(int);
	virtual void setSize(float, float);
	virtual void onOrphan(void);
	virtual void wobble(void);
	virtual void wasHurt(void);
	virtual void startSpinAttack(void);
	virtual void stopSpinAttack(void);
	virtual void setDamageNearbyMobs(bool);
	virtual void renderDebugServerState(unsigned __int64 Options);
	virtual void reloadLootTable(void);
	virtual void reloadLootTable(unsigned __int64 EquipmentTableDefinition);
	virtual int getDeletionDelayTimeSeconds(void);
	virtual void kill(void);
	virtual void die(unsigned __int64 ActorDamageSource);
	virtual void shouldDropDeathLoot(void);
	virtual void shouldTick(void);
	virtual void applySnapshot(unsigned __int64 PlayerSnapshotComponent, unsigned __int64 PlayerSnapshotComponent2);
	virtual float getNextStep(float);
	virtual int getLootTable(void);
	virtual void interpolatorTick(void);
	virtual void onPush(Actor&);
	virtual int getLastDeathPos(void);
	virtual int getLastDeathDimension(void);
	virtual void hasDiedBefore(void);
	virtual void doWaterSplashEffect(void);
	virtual void _shouldProvideFeedbackOnHandContainerItemSet(int HandSlot, ItemStack const&);
	virtual void _shouldProvideFeedbackOnArmorSet(ArmorSlot, ItemStack const&);
	virtual void updateEntitySpecificMolangVariables(unsigned __int64 RenderParams);
	virtual void shouldTryMakeStepSound(void);
	virtual void canMakeStepSound(void);
	virtual void _hurt(unsigned __int64 ActorDamageSource, int, bool, bool);
	virtual void markHurt(void);
	virtual void _getAnimationComponent();
	virtual void readAdditionalSaveData(void* compoundtag, unsigned __int64 DataLoadHelper);
	virtual void addAdditionalSaveData(void* compoundtag);
	virtual void _playStepSound(BlockPos const&, Block const&);
	virtual void _playFlySound(BlockPos const&, Block const&);
	virtual void _makeFlySound(void);
	virtual void checkInsideBlocks(float);
	virtual void pushOutOfBlocks(Vec3<float> const&);
	virtual void spawnTrailBubbles(void);
	virtual void updateInsideBlock(void);
	virtual void _removePassenger(unsigned __int64 const&, bool, bool, bool);
	virtual void _onSizeUpdated(void);
	virtual void _doAutoAttackOnTouch(Actor&);
	virtual void knockback(Actor*, int, float, float, float, float, float);
	virtual void spawnAnim(void);
	virtual void setSprinting(bool);
	virtual int getHurtSound(void);
	virtual int getDeathSound(void);
	virtual __int64 getSpeed(void);
	virtual void setSpeed(float);
	virtual int getSprintSpeedIncrease(void);
	virtual void hurtEffects(unsigned __int64 ActorDamageSource, int, bool, bool);
	virtual int getMeleeWeaponDamageBonus(Actor);
	virtual int getMeleeKnockbackBonus(void);
	virtual void travel(float, float, float);
	virtual void applyFinalFriction(float, bool);
	virtual void aiStep(void);
	virtual void aiStep(unsigned __int64 IMobMovementProxy);
	virtual void pushActors(void);
	virtual void lookAt(Actor*, float, float);
	virtual bool isLookingAtAnEntity(void);
	virtual void checkSpawnRules(bool);
	virtual void checkSpawnObstruction(void);
	virtual float getAttackAnim(float);
	virtual int getItemUseDuration(void);
	virtual int getItemUseStartupProgress(void);
	virtual int getItemUseIntervalProgress(void);
	virtual int getItemUseIntervalAxis(void);
	virtual int getTimeAlongSwing(void);
	virtual void ate(void);
	virtual int getMaxHeadXRot(void);
	virtual bool isAlliedTo(Actor*);
	virtual void doHurtTarget(Actor*, unsigned __int64 ActorDamageCause);
	virtual void canBeControlledByRider(void);
	virtual void leaveCaravan(void);
	virtual void joinCaravan(Actor);
	virtual void hasCaravanTail(void);
	virtual int getCaravanHead(void);
	virtual int getArmorValue(void);
	virtual int getArmorCoverPercentage(void);
	virtual int getToughnessValue(void);
	virtual void hurtArmorSlots();
	virtual void setDamagedArmor(int, ItemStack const&);
	virtual void sendArmorDamage();
	virtual void sendArmor();
	virtual void containerChanged(int);
	virtual void updateEquipment(void);
	virtual void clearEquipment(void);
	virtual std::vector<int> getAllArmorID(void);
	virtual class Item* getAllHand(void);
	virtual class Item* getAllEquipment(void);
	virtual int getArmorTypeHash(void);
	virtual void dropEquipmentOnDeath(unsigned __int64 ActorDamageSource, int);
	virtual void dropEquipmentOnDeath(void);
	virtual void clearVanishEnchantedItemsOnDeath(void);
	virtual void sendInventory(bool);
	virtual float getDamageAfterEnchantReduction(int ActorDamageSource, float);
	virtual float getDamageAfterArmorReduction(int ActorDamageSource, float);
	virtual float getDamageAfterResistanceEffect(int ActorDamageSource, float);
	virtual void createAIGoals(void);
	virtual void onBorn(Actor&, Actor&);
	virtual void setItemSlot(int, ItemStack const&);
	virtual void setTransitioningSitting(bool);
	virtual void attackAnimation(Actor*, float);
	virtual int getAttackTime(void);
	virtual void _getWalkTargetValue(BlockPos const&);
	virtual void canExistWhenDisallowMob(void);
	virtual void useNewAi(void);
	virtual void ascendLadder(void);
	virtual void ascendBlockByJumping(void);
	virtual void descendBlockByCrouching(void);
	virtual void dropContainer(void);
	virtual void initBodyControl(void);
	virtual void jumpFromGround(void);
	virtual void jumpFromGround(unsigned __int64 IMobMovementProxy);
	virtual void updateAi(void);
	virtual void newServerAiStep(void);
	virtual void _serverAiMobStep(void);
	virtual void dropBags(void);
	virtual void tickDeath(void);
	virtual void updateGliding(void);
	virtual void _allowAscendingScaffolding(void);
	virtual void _getAdjustedAABBForSpawnCheck(unsigned __int64 aabb, Vec3<float> const&);
	virtual void prepareRegion(void* chunksource);
	virtual void destroyRegion(void);
	virtual void suspendRegion(void);
	virtual void resendAllChunks(void);
	virtual void _fireWillChangeDimension(void);
	virtual void _fireDimensionChanged(void);
	virtual void changeDimensionWithCredits(Dimension);
	virtual void tickWorld(unsigned __int64 Tick);
	virtual void Function367();
	virtual int getTickingOffsets(void);
	virtual void moveView(void);
	virtual void moveSpawnView(Vec3<float> const&, unsigned __int64 AutomaticIDDimensionint);
	virtual void setName(const std::string&);
	virtual int getTravelledMethod(void);
	virtual void checkMovementStats(Vec3<float> const&);
	virtual int getCurrentStructureFeature(void);
	virtual bool isAutoJumpEnabled(void);
	virtual void respawn(void);
	virtual void resetRot(void);
	virtual bool isInTrialMode(void);
	virtual void hasResource(int);
	virtual void completeUsingItem(void);
	virtual void startDestroying(void);
	virtual void stopDestroying(void);
	virtual void openPortfolio(void);
	virtual void openBook(int, bool, int, Actor* blockactor);
	virtual void openTrading(unsigned __int64 const&, bool);
	virtual void canOpenContainerScreen(void);
	virtual void openChalkboard(Actor& ChalkboardBlockActor, bool);
	virtual void openNpcInteractScreen(unsigned __int64 ptrToNpcDialogueData);
	virtual void openInventory(void);
	virtual void displayChatMessage(const std::string&, const std::string&);
	virtual void displayClientMessage(const std::string&);
	virtual void displayTextObjectMessage(unsigned __int64 TextObjectRoot, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
	virtual void displayTextObjectWhisperMessage(unsigned __int64 ResolvedTextObject, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
	virtual void displayTextObjectWhisperMessage(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
	virtual void displayWhisperMessage(std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char>> const&);
	virtual void startSleepInBed(BlockPos const&);
	virtual void stopSleepInBed(bool, bool);
	virtual void canStartSleepInBed(void);
	virtual int getSleepTimer(void);
	virtual int getPreviousTickSleepTimer(void);
	virtual void openSign(BlockPos const&);
	virtual void playEmote(const std::string&);
	virtual bool isHostingPlayer(void);
	virtual bool isLoading(void);
	virtual bool isPlayerInitialized(void);
	virtual void stopLoading(void);
	virtual void registerTrackedBoss(unsigned __int64);
	virtual void unRegisterTrackedBoss(unsigned __int64);
	virtual void setPlayerGameType(int);
	virtual void initHUDContainerManager(void);
	virtual void _crit(Actor*);
	virtual __int64 getEventing(void);
	virtual __int64 getUserId(void);
	virtual void sendEventPacket(unsigned __int64 EventPacket);
	virtual void addExperience(int);
	virtual void addLevels(int);
	virtual void Function416();
	virtual void Function417();
	virtual void inventoryChanged(unsigned __int64 Container, int, ItemStack const&, ItemStack const&, bool);
	virtual void Function419();
	virtual void deleteContainerManager(void);
	virtual void setFieldOfViewModifier(float);
	virtual bool isActorRelevant(Actor const&);
	virtual void Function424();
	virtual void onSuspension(void);
	virtual void onLinkedSlotsChanged(void);
	virtual void startCooldown(class Item const*);
	virtual int getItemCooldownLeft(void* hashedstr);
	virtual int getItemCooldownLeft(unsigned long);
	virtual int getMaxItemCooldownLeft(void);
	virtual bool isItemInCooldown(void* hashedstr);
	virtual void Function432();
	virtual void Function433();
	virtual void sendNetworkPacket(void* Packet);
	virtual void Function435();
	virtual class MoveInputHandler* getMoveInputHandler();
	virtual void Function437();
	virtual void Function438();
	virtual void reportMovementTelemetry(void* MovementEventType);
	virtual bool isSimulated(void);
	virtual const std::string& getXUID(void);
	virtual int getMovementSettings(void);
	virtual void addSavedChunk(unsigned __int64 ChunkPos);
	virtual void onMovePlayerPacketNormal(Vec3<float> const&, Vec2<float> const&, float);
	virtual void _createChunkSource(void* ChunkSource);
	virtual void setAbilities(unsigned __int64 LayeredAbilities);
};